#!/usr/bin/env ruby -i
#A Markov Chain generator.

require 'optparse'
require '../lib/marky_markov.rb'

options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: marky_markov COMMAND [OPTIONS]"
  opts.separator ""
  opts.separator "Commands:"
  opts.separator "    speak: Generate Markov Chain sentence (5 sentences by default)"
  opts.separator "    listen [sentence]: Generate Markov Chain sentence from supplied string."
  opts.separator "    read [file]: Add words to dictionary from supplied text file"
  opts.separator ""
  opts.separator "Options"

  options[:dictionary] = "#{ENV["HOME"]}/.marky_markov_dictionary"
  opts.on('-d', '--dictionary LOCATION', 'Use custom dictionary location') do |file|
    options[:dictionary] = file
  end

  options[:sentencecount] = 5
  opts.on('-c', '--sentencecount NUMBER', 'Set number of sentences generated') do |number|
    options[:sentencecount] = number.to_i
    if options[:sentencecount] < 1
      abort("You must enter a number higher than 0. Try 4. Or maybe 10?")
    end
  end

  options[:source] = nil
  opts.on('-s', '--source FILE',
          'Generate and use temporary dictionary from source text') do |file|
    options[:source] = file
  end

  options[:resetdictionary] = false
  opts.on('--reset', "WARNING: Deletes default dictionary." ) do
    options[:resetdictionary] = true
  end

  options[:depth] = 2
  opts.on('-p', '--depth DEPTH',
          'Use a chaining depth (integer, default 2 is recommended)') do |depth|
    options[:depth] = depth.to_i
  end

  opts.on('-h', '--help', 'Display this screen') do
    STDOUT.puts opt_parser
    exit
  end
end

begin opt_parser.parse!
rescue OptionParser::InvalidOption => err
  abort("Sorry, #{err}. Run marky_markov -h for allowed options.")
end

if options[:resetdictionary]
  STDOUT.puts MarkyMarkov::Dictionary.delete_dictionary!(options[:dictionary])
  exit
end

case ARGV[0]
when "speak"
  if options[:source]
    markov = MarkyMarkov::TemporaryDictionary.new(options[:depth])
    begin markov.parse_file(options[:source])
    rescue MarkovDictionary::FileNotFoundError => err
      abort("Sorry, #{err}. I can't use it as a source.")
    end
  else
    unless File.exists?("#{options[:dictionary]}.mmd")
      STDERR.puts "Dictionary file #{options[:dictionary]}.mmd does not exist. Cannot generate sentence."
      STDERR.puts "Please build a dictionary with read or use the --source option to build a temporary dictionary."
      exit(false)
    end
    markov = MarkyMarkov::Dictionary.new(options[:dictionary], options[:depth])
  end
  STDOUT.puts markov.generate_n_sentences(options[:sentencecount])
when "read"
  source = ARGV[1] || options[:source]
  markov = MarkyMarkov::Dictionary.new(options[:dictionary])
  begin
    markov.parse_file(source)
    markov.save_dictionary!
    STDOUT.puts "Added #{source} to dictionary."
  rescue MarkovDictionary::FileNotFoundError => err
    abort("Sorry, I can't read #{source}. I'm afraid it doesn't exist!")
  end
when "listen"
  markov = MarkyMarkov::TemporaryDictionary.new
  markov.parse_string(STDIN.tty? ? ARGV[1] : STDIN.read)
  STDOUT.puts markov.generate_n_sentences(options[:sentencecount])
else
  unless STDIN.tty?
    markov = MarkyMarkov::TemporaryDictionary.new
    markov.parse_string(STDIN.read)
    STDOUT.puts markov.generate_n_sentences(options[:sentencecount])
  else
    STDERR.puts "Sorry, I don't know how to #{ARGV[0]}." if ARGV[0]
    STDOUT.puts opt_parser
    exit false
  end
end
